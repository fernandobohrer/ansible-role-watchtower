---
- name: Get the primary group associated with the ansible_user
  ansible.builtin.command: getent group {{ ansible_user }}
  register: watchtower__ansible_user_group
  changed_when: false

- name: Set the watchtower__deployment_group fact
  ansible.builtin.set_fact:
    watchtower__deployment_group: "{{ watchtower__ansible_user_group.stdout.split(':')[0] }}"

- name: Ensure role dependencies are installed
  ansible.builtin.apt:
    name: "{{ __watchtower__role_dependencies }}"
    state: present
    update_cache: true
    cache_valid_time: "{{ apt_cache_valid_time }}"

- name: Ensure deployment directory exists
  ansible.builtin.file:
    path: "{{ watchtower__deployment_directory }}"
    state: directory
    owner: "{{ watchtower__deployment_user }}"
    group: "{{ watchtower__deployment_group }}"
    mode: "755"

- name: Deploy templates
  ansible.builtin.template:
    src: "{{ item.source }}"
    dest: "{{ item.destination }}"
    owner: "{{ watchtower__deployment_user }}"
    group: "{{ watchtower__deployment_group }}"
    mode: "644"
    backup: false
  with_items:
    - { source: makefile.j2, destination: "{{ watchtower__deployment_directory }}/makefile" }
    - { source: watchtower.env.j2, destination: "{{ watchtower__deployment_directory }}/{{ __watchtower__container_env_file }}" }

- name: Deploy configuration files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ watchtower__deployment_directory }}/{{ item }}"
    owner: "{{ watchtower__deployment_user }}"
    group: "{{ watchtower__deployment_group }}"
    mode: "644"
    backup: false
  with_items:
    - docker-compose.yml

- name: Ensure watchtower container is started
  community.docker.docker_compose_v2:
    project_src: "{{ watchtower__deployment_directory }}"
    env_files: "{{ __watchtower__container_env_file }}"
    project_name: "{{ watchtower__container_name }}"
    remove_orphans: true
    state: present
